<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>C&#43;&#43; Deeper on Caesar&#39;s Paperbox</title>
    <link>/post/tech/cpp-deeper/</link>
    <description>Recent content in C&#43;&#43; Deeper on Caesar&#39;s Paperbox</description>
    <image>
      <url>/avatar.jpeg</url>
      <link>/avatar.jpeg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 07 Nov 2022 17:28:07 +0800</lastBuildDate><atom:link href="/post/tech/cpp-deeper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>C&#43;&#43; Deeper-1 变量和基本类型</title>
      <link>/post/tech/cpp-deeper/c&#43;&#43;-deeper-1-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Mon, 07 Nov 2022 17:28:07 +0800</pubDate>
      
      <guid>/post/tech/cpp-deeper/c&#43;&#43;-deeper-1-%E5%8F%98%E9%87%8F%E5%92%8C%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B/</guid>
      <description>任何常用的编程语言都具备一组公共的语法特征，不同语言仅在特征的细节上有所区别。要想学习并掌握一种编程语言，理解其语法特征的实现细节是第一步。最基本的特征包括：
整形、字符型等内置类型 变量，用来为对象命名 表达式和语句，用于操纵上述数据类型的具体 if 或 while 等控制结构，这些结构允许我们有选择地执行一些语句或者重复地执行一些语句 函数，用于定义可供随时调用的计算单元。 C+定义了一套包括算术类型(arithmetic type)和空类型(void) 在内的基本数据类型。其中算术类型包含了字符、整型数、布尔值和浮点数。空类型不对应具体的值，仅用于一些特殊的场合，例如最常见的是，当函数不返回任何值时使用空类型作为返回类型。
带符号类型和无符号类型 除去布尔型和扩展的字符型之外，其他整型可以划分为带符号的(signed)和无符号的(unsigned)两种。带符号类型可以表示正数、负数或 0，无符号类型则仅能表示大于等于 0 的值。
字符类型：被分为了三种：char、signed char 和 unsigned char。
特别需要注意的是：类型 char 和类型 signed char 并不一样。尽管字符型有三种，但是字符的表现形式却只有两种：带符号的和无符号的。类型 char 实际上会表现为上述两种形式中的一种，具体是哪种由编译器决定。 无符号类型中所有比特都用来存储值，例如，8 比特的 unsigned char 可以表示 0 至 255 区间内的值。
Q：如何选择类型？ 当明确知晓数值不可能为负时，选用无符号类型。 使用 int 执行整数运算。在实际应用中，short 常常显得太小而 1ong 一般和 int 有一样的尺寸。如果你的数值超过了 int 的表示范围，选用 long long。 在算术表达式中不要使用 char 或 bool,只有在存放字符或布尔值时才使用它们。因为类型 char 在一些机器上是有符号的，而在另一些机器上又是无符号的， 所以如果使用 char 进行运算特别容易出问题。如果你需要使用一个不大的整数， 那么明确指定它的类型是 signed char 或者 unsigned char。 执行浮点数运算选用 double,这是因为 float 通常精度不够而且双精度浮点数和单精度浮点数的计算代价相差无几。事实上，对于某些机器来说，双精度运算甚至比单精度还快。long double 提供的精度在一般情况下是没有必要的， 况且它带来的运行时消耗也不容忽视。 变量声明和定义的关系 为了允许把程序拆分成多个逻辑部分来编写，C+语言支持分离式编译(separate compilation) 机制，该机制允许将程序分割为若干个文件，每个文件可被独立编译。</description>
    </item>
    
  </channel>
</rss>
