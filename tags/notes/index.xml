<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Notes on Caesar&#39;s Paperbox</title>
    <link>/tags/notes/</link>
    <description>Recent content in Notes on Caesar&#39;s Paperbox</description>
    <image>
      <url>/avatar.jpeg</url>
      <link>/avatar.jpeg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 06 May 2022 11:40:58 +0800</lastBuildDate><atom:link href="/tags/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>O5-IO系统</title>
      <link>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o5-io%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Fri, 06 May 2022 11:40:58 +0800</pubDate>
      
      <guid>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o5-io%E7%B3%BB%E7%BB%9F/</guid>
      <description>Intro 除了提供抽象（例如，进程、地址空间和文件）以外，操作系统还要控制计算机的所有 I/O(输入输出) 设备。操作系统必须向设备发送命令，捕捉中断，并处理设备的各种错误。
它还应该在设备和系统的其他部分之间提供简单且易于使用的接口。如果有可能，这个接口对于所有设备都应该是相同的，这就是所谓的设备无关性。
I/O 部分的代码是整个操作系统的重要组成部分。操作系统如何管理 I/O 是本章的主题。
5.输入输出(I/O)管理 （1）I/O 管理概述 1）I/O 控制方式 2）I/O 软件层次结构 （2）I/O 核心子系统 1）I/O 调度概念 2）高速缓存与缓冲区 3）设备分配与回收 4）假脱机技术(SPOOLing) I/O 硬件原理 不同的人对于 IO 硬件的理解是不同的。对于电子工程师而言，I/O 硬件就是芯片、导线、电源、电机和其他组成硬件的物理部件。
对程序员而言，则只注意 I/O 硬件提供给软件的接口，如硬件能够接收的命令、它能够实现的功能以及它能够报告的错误。
I/O 设备 IO 设备可以大致分为两类：块设备（Block device）和字符设备（character device）
块设备 把信息存储在固定大小的块中，每个块有自己的地址 所有的传输都是以一个或多个完整的（连续的）块为单位 块设备的基本特征就是每个块都能独立于其他块而读写。 硬盘、蓝光光盘和 USB 盘是最常见的设备 主要概念中的 I/O 系统分类方式：
计算机系统中的 I/O 设备按使用特性可分为以下类型： 人机交互类外部设备：用于同计算机用户之间交互的设备，如打印机、显示器、鼠标、键盘等。这类设备数据交换速度相对较慢，通常是以字节为单位进行数据交换。 存储设备：用于存储程序和数据的设备，如磁盘、磁带、光盘等。这类设备用于数据交换，速度较快，通常以多字节组成的块为单位进行数据交换。 网络通信设备：用于与远程设备通信的设备，如各种网络接口、调制解调器等。其速度介于前两类设备之间。网络通信设备在使用和管理上与前两类设备也有很大不同。 IO 设备还可以按以下方式分类：
按传输速度分类
低速设备：传输速率仅为每秒几个到数百个字节的一类设备，如键盘、鼠标等。 中速设备：传输速率在每秒数千个字节至数万个字节的一类设备，如行式打印机、 激光打印机等。 高速设备：传输速率在数百个千字节至千兆字节的一类设备，如磁带机、磁盘机、 光盘机等。 按信息交换的单位分类
块设备：由于信息的存取总是以数据块为单位，所以存储信息的设备称为块设备。它属于有结构设备，如磁盘等。磁盘设备的基本特征是传输速率较高，以及可寻址，即对它可随机地读/写任一块。 字符设备：用于数据输入/输出的设备为字符设备，因为其传输的基本单位是字符。它属于无结构类型，如交互式终端机、打印机等。它们的基本特征是传输速率低、不可寻址，并且在输入/输出时常釆用中断驱动方式。 设备控制器 I/O 设备一般由机械部件和电子部件两部分组成。通常可以将这两部分分开处理，以提供更加模块化和更加通用的设计。
电子部件称作设备控制器(device controller)或适配器(adapter)。在个人计算机上，它经常以主板上的芯片的形式出现，或者以插入(PCI)扩展槽中的印刷电路板的形式出现。</description>
    </item>
    
    <item>
      <title>O4-文件系统</title>
      <link>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o4-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Thu, 05 May 2022 11:40:58 +0800</pubDate>
      
      <guid>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o4-%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</guid>
      <description>Intro 4.文件管理 （1）文件系统基础 1）文件概念 2）文件的结构 ：顺序文件，索引文件，索引顺序文件 3）目录结构 ：文件控制块和索引节点，单级目录结构和两级目录结构，树形目录结构 4）文件共享 5）文件保护 ：访问类型，访问控制 （2）文件系统实现 1）文件系统层次结构 2）目录实现 3）文件实现 （3）磁盘组织与管理 1）磁盘的结构 2）磁盘调度算法 3）磁盘的管理 Q：实现内存管理后出现的三个问题
所有的计算机应用程序都需要存储和检索信息。进程运行时，可以在它自己的地址空间存储一定量的信息，但存储容量受虚似地址空间大小的限制。 在进程终止时，它保存的信息也随之丢失。即数据持久化问题 需要多个进程同时访问同一信息（或者其中部分信息） 长期存储信息的三个基本要求：
能存储大量信息 使用信息的进程终止时，信息依旧存在 必须能使多个进程并发访问有关信息 利用磁盘的概念，可以实现对于数据的大量持久，但也会随之出现一些问题：
Q：在磁盘概念应用于 OS 中时出现的问题： 如何找到信息？ 如何防止一个用户读取另一个用户的数据？ 如何知道哪些块是空闲的？ 就像操作系统提取处理器的概念来建立进程的抽象，以及提取物理存储器的概念来建立进程（虚拟） 地址空间的抽象那样，我们可以用一个新的抽象——文件来解决这个问题。进程（与线程）、地址空间和文件，这些抽象概念均是操作系统中最重要的概念。
文件、进程、地址空间是操作系统中最重要的三个抽象的概念
文件
文件
文件是进程创建的信息逻辑单元。 一个磁盘一股含有几千甚至几百万个文件，每个文件是独立于其他文件的，唯一不同的是文件是对磁盘的建模，而非对 RAM 的建模。 事实上，如果能把每个文件看成一个地址空间，那么就能理解文件的本质了。 进程可以读取已经存在的文件，并在需要时建立新的文件。
存储在文件中的信息是持久的。
文件是受 OS 管理的
有关文件的构造、命名、访问、使用、保护、实现和管理方法都是 OS 设计的主要内容 OS 中处理文件的部分称为文件系统（File System）
1 文件 从用户的角度考察文件：
Q：用户如何使用文件？ Q：文件具有哪些特性？ 文件的概念 文件(File)是操作系统中的一个重要概念。在系统运行时，计算机以进程为基本单位进行资源的调度和分配；而在用户进行的输入、输出中，则以文件为基本单位。
大多数应用程序的输入都是通过文件来实现的，其输出也都保存在文件中，以便信息的长期存及将来的访问。当用户将文件用于应用程序的输入、输出时，还希望可以访问文件、修改文件和保存文件等，实现对文件的维护管理，这就需要系统提供一个文件管理系统，操作系统中的文件系统(File System)就是用于实现用户的这些管理要求。
从用户的角度看，文件系统是操作系统的重要部分之一：
用户关心的是如何命名、分类和查找文件，如何保证文件数据的安全性以及对文件可以进行哪些操作等。而对其中的细节，如文件如何存储在辅存上、如何管理文件辅存区域等关心甚少。 文件系统提供了与二级存储相关的资源的抽象，让用户能在不了解文件的各种属性、文件存储介质的特征以及文件在存储介质上的具体位置等情况下，方便快捷地使用文件。
用户通过文件系统建立文件，提供应用程序的输入、输出，对资源进行管理。首先了解文件的结构，我们通过自底向上的方式来定义。
数据项
数据项是文件系统中最低级的数据组织形式，可分为以下两种类型： 基本数据项：用于描述一个对象的某种属性的一个值，如姓名、日期或证件号等，是数据中可命名的最小逻辑数据单位，即原子数据。 组合数据项：由多个基本数据项组成。 记录</description>
    </item>
    
    <item>
      <title>O3-内存管理</title>
      <link>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
      <pubDate>Wed, 04 May 2022 11:40:58 +0800</pubDate>
      
      <guid>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o3-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
      <description>Intro 内存管理包括内存管理概念、交换与覆盖、连续分配管理方式和非连续分配管理方式（分页管理方式、分段管理方式、段页式管理方式）。
虚拟内存管理包括虚拟内存概念、请求分页管理方式、页面置换算法、页面分配策略、工作集和抖动。
3.内存管理 （1）内存管理基础 1）内存管理概念 ：程序装入与链接，逻辑地址与物理地址空间，内存保护 2）交换与覆盖 3）连续分配管理方式 4）非连续分配管理方式 ：分页管理方式，分段管理方式，段页式管理方式 （2）虚拟内存管理 1）虚拟内存基本概念 2）请求分页管理方式 3）页面置换算法 ：最佳置换算法（OPT），先进先出置换算法（FIFO），最近最少使用置换算法（LRU），时钟置换算法（CLOCK） 4）页面分配策略 5）工作集 6）抖动 1 内存管理概念 内存管理(Memory Management)是操作系统设计中最重要和最复杂的内容之一。
虽然计算机硬件一直在飞速发展，内存容量也在不断增长，但是仍然不可能将所有用户进程和系统所需要的全部程序和数据放入主存中，所以操作系统必须将内存空间进行合理地划分和有效地动态分配。操作系统对内存的划分和动态分配，就是内存管理的概念。
有效的内存管理在多道程序设计中非常重要，不仅方便用户使用存储器、提高内存利用率，还可以通过虚拟技术从逻辑上扩充存储器。
内存管理的功能： 内存空间的分配与回收：由操作系统完成主存储器空间的分配和管理，使程序员摆脱存储分配的麻烦，提高编程效率。 地址转换：在多道程序环境下，程序中的逻辑地址与内存中的物理地址不可能一致，因此存储管理必须提供地址变换功能，把逻辑地址转换成相应的物理地址。 内存空间的扩充：利用虚拟存储技术或自动覆盖技术，从逻辑上扩充内存。 存储保护：保证各道作业在各自的存储空间内运行，互不干扰。 程序装入与链接 创建进程首先要将程序和数据装入内存。
将用户源程序变为可在内存中执行的程序，通常需要以下几个步骤： 编译：由编译程序将用户源代码编译成若干个目标模块。 链接：由链接程序将编译后形成的一组目标模块，以及所需库函数链接在一起，形成一个完整的装入模块。 装入：由装入程序将装入模块装入内存运行。 程序链接方式：
静态链接： 在程序运行之前，先将各目标模块及它们所需的库函数链接成一个完整的可执行程序，以后不再拆开。 装入时动态链接： 将用户源程序编译后所得到的一组目标模块，在装入内存时，釆用边装入边链接的链接方式。 运行时动态链接： 对某些目标模块的链接，是在程序执行中需要该目标模块时，才对它进行的链接。其优点是便于修改和更新，便于实现对目标模块的共享。 内存的装入模块在装入内存时，同样有以下三种方式：
绝对装入 在编译时，如果知道程序将驻留在内存的某个位置，编译程序将产生绝对地址的目标代码。绝对装入程序按照装入模块中的地址，将程序和数据装入内存。由于程序中的逻辑地址与实际内存地址完全相同，故不需对程序和数据的地址进行修改。 绝对装入方式只适用于单道程序环境。另外，程序中所使用的绝对地址,可在编译或汇编时给出，也可由程序员直接赋予。而通常情况下在程序中釆用的是符号地址，编译或汇编时再转换为绝对地址。 可重定位装入——静态重定位 在作业运行前一次性装入分配全部所需的内存空间 在多道程序环境下，多个目标模块的起始地址通常都是从 0 开始，程序中的其他地址都是相对于起始地址的,此时应釆用可重定位装入方式。根据内存的当前情况，将装入模块装入到内存的适当位置。 装入时对目标程序中指令和数据的修改过程称为重定位，地址变换通常是在装入时一次完成的，所以又称为静态重定位。 静态重定位的特点是在一个作业装入内存时，必须分配其要求的全部内存空间，如果没有足够的内存，就不能装入该作业。此外，作业一旦进入内存后，在整个运行期间不能在内存中移动，也不能再申请内存空间。 动态运行时装入——动态重定位 动态运行时，实时将所需内存空间分配并装入，且均为相对地址 程序在内存中如果发生移动，就需要釆用动态的装入方式。装入程序在把装入模块装入内存后，并不立即把装入模块中的相对地址转换为绝对地址，而是把这种地址转换推迟到程序真正要执行时才进行。因此，装入内存后的所有地址均为相对地址。 这种方式需要一个重定位寄存器的支持 动态重定位的特点是可以将程序分配到不连续的存储区中；在程序运行之前可以只装入它的部分代码即可投入运行，然后在程序运行期间，根据需要动态申请分配内存；便于程序段的共享，可以向用户提供一个比存储空间大得多的地址空间。 基址寄存器与界限寄存器
意义：——真正实现了内存地址动态重定位 这个方法利用的就是动态重定位技术。即简单地把每个进程的地址空间映射到物理内存的不同部分。 基址寄存器-即基地址 Reg 存储当前的基地址 界限寄存器 主要提供地址越界检查保护 此时，程序装载到内存中的连续空闲位置且装载期间无需重定位。 程序的起始物理地址装载到基址寄存器 程序的长度装载到界限寄存器 每次一个进程访问内存，取一条指令，读或写一个数据字，CPU 硬件会在把地址发送到内存总线前， 自动把基址值加到进程发出的地址值上。同时，它检查程序提供的地址是否等于或大于界限寄存器里的值。 如果访问的地址超过了界限，会产生错误并中止访问。 Q：如何实现动态地址重定位？</description>
    </item>
    
    <item>
      <title>O1.5-操作系统用户界面</title>
      <link>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o1.5-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/</link>
      <pubDate>Tue, 03 May 2022 11:40:58 +0800</pubDate>
      
      <guid>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o1.5-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%94%A8%E6%88%B7%E7%95%8C%E9%9D%A2/</guid>
      <description>Intro 用户界面是操作系统的重要组成部分。用户界面负责用户和操作系统之间的交互。即用户通过用户界面向计算机系统提交服务需求，计算机通过用户界面向用户提供用户所需要的服务。
从两类用户出发：
被服务者（使用和管理计算机应用程序的用户） 开发者 操作系统为普通用户，管理员用户和开发者提供不同的用户界面。
命令控制界面+系统调用
主要概念 List[]
作业的概念 spooling 系统 两个接口 一般用户输入输出 作业 作业概念
在一次应用业务处理过程中，从输入开始到输出结束，用户要求计算机所做的有关该次业务处理的全部工作称为一个作业。 作业步
作业由不同的顺序相连的作业步组成。作业步是在一个作业的处理过程中计算机所做的相对独立的工作。 每一个作业步产生下一个作业步的输入文件。 作业的组成
作业是一个比程序更广的概念。 $$ 作业 = 程序 + 数据 + 作业说明书 $$
作业应用于早期批处理系统和大型机系统，但对现在的微机系统没有广泛应用。
作业组织
批处理系统中，作业是抢占内存的基本单位。批处理系统以作业为单位把程序和数据调入内存以便执行。 数据+程序 =&amp;gt; 完成用户要求的业务处理工作
作业说明书 =&amp;gt; 生成作业控制块 JCB
作业说明书
系统通过作业说明书控制文件形式的程序和数据，使其执行操作。 作业的基本情况 作业控制描述 资源要求描述 作业说明书广泛应用于批处理系统中。
JCB
登记作业要求的执行情况，预计执行时间和优先级等。分配资源和控制作业中的程序和数据的编译，链接，装入，执行。 一般用户输入输出方式 联机输入方式（both online） 脱机输入方式（先缓冲，后读入，解决联机慢） 直接耦合方式（利用大容量存储器将主存和外存连接） spooling 系统 网络联机 SPOOLing 系统 Simultaneous Peripheral Operation On-Line 即 外围设备同时联机操作 SPOOLing 的意思是外部设备同时联机操作，又称为假脱机输入/输出操作，是操作系统中釆用的一项将独占设备改造成共享设备的技术。
目的 解决外围设备与 CPU 处理速度不匹配的问题。 主存只需要连接输入井；由输入井负责连接和存储 DMA 输入和输出的设备 为了缓和 CPU 的高速性与 I/O 设备低速性之间的矛盾而引入了脱机输入/输出技术。该技术是利用专门的外围控制机，将低速 I/O 设备上的数据传送到高速磁盘上；或者相反。 多台外围设备通过通道或 DMA 和主机外存连接起来。作业的输入输出过程由主机中的操作系统控制</description>
    </item>
    
    <item>
      <title>O2-进程管理</title>
      <link>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o2-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</link>
      <pubDate>Tue, 03 May 2022 11:40:58 +0800</pubDate>
      
      <guid>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o2-%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</guid>
      <description>Intro 2.进程管理 （1）进程与线程 1）进程概念 2）进程的状态与转换 3）进程控制 4）进程组织 5）进程通信：共享存储系统，消息传递系统，管道通信。 6）线程概念与多线程模型 （2）处理机调度 1）调度的基本概念 2）调度时机、切换与过程 3）调度的基本准则 4）调度方式 5）典型调度算法：先来先服务调度算法，短作业（短进程、短线程）优先调度算法，时间片轮转调度算法，优先级调度算法，高响应比优先调度算法，多级反馈队列调度算法 （3）同步与互斥 1）进程同步的基本概念 2）实现临界区互斥的基本方法：软件实现方法，硬件实现方法 （4）死锁 1）死锁的概念 2）死锁处理策略 3）死锁预防 4）死锁避免：系统安全状态，银行家算法 5）死锁检测和解除 1 进程与线程 操作系统的重要任务之一是使用户充分、有效地利用系统资源。
现代操作系统四大特点：
并发性 共享性 虚拟性（用户随机使用） 异步性 采用一个什么样的概念来描述计算机程序的执行过程和作为资源分配的基本单位，才能充分反映操作系统的执行并发、资源共享及用户随机的特点呢？
即：进程 进程的非正式定义非常简单:进程就是运行中的程序。
程序本身是没有生命周期的,它只是存在磁盘上面的一些指令(也可能是一些静态数据) 。 是操作系统让这些字节运行起来,让程序发挥作用。 进程是一种最重要、最基本的 OS 抽象概念之一
进程的概念 在多道程序环境下，允许多个程序并发执行，此时它们将失去封闭性，并具有间断性及不可再现性的特征。 为此引入了进程(Process)的概念，以便更好地描述和控制程序的并发执行，实现操作系统的并发性和共享性。
为了使参与并发执行的程序（含数据）能独立地运行，必须为之配置一个专门的数据结构，称为进程控制块(Process Control Block, PCB)。
系统利用 PCB 来描述进程的基本情况和运行状态，进而控制和管理进程。相应地，由程序段、相关数据段和 PCB 三部分构成了进程映像（进程实体）。
所谓创建进程，实质上是创建进程映像中的 PCB；而撤销进程，实质上是撤销进程的 PCB。 值得注意的是，进程映像是静态的，进程则是动态的。
PCB 是进程存在的唯一标志
主要关注动态的执行过程这一概念。
即：并发执行的程序在执行过程中分配和管理资源的基本单位。 从理论角度看，进程是一种对整个程序运行过程的抽象。（面向过程？啧啧） 从实现角度看，是一种数据结构，目的在于清晰地刻画动态系统的内在规律，有效管理和调度进入计算机系统主存储器运行的程序。 从不同的角度，进程可以有不同的定义，比较典型的定义有：
进程是程序的一次执行过程。 进程是一个程序及其数据在处理机上顺序执行时所发生的活动。 进程是具有独立功能的程序在一个数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。 在引入进程实体的概念后，我们可以把传统操作系统中的进程定义为：“进程是进程实体的运行过程，是系统进行资源分配和调度的一个独立单位。”
进程的特征 进程是由多程序的并发执行而引出的，它和程序是两个截然不同的概念。进程的基本特征是对比单个程序的顺序执行提出的，也是对进程管理提出的基本要求。</description>
    </item>
    
    <item>
      <title>O1-操作系统概述</title>
      <link>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Mon, 02 May 2022 11:40:58 +0800</pubDate>
      
      <guid>/post/tech/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%AC%94%E8%AE%B0/o1-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%A6%82%E8%BF%B0/</guid>
      <description>Intro 1.操作系统概述 （1）操作系统的概念、特征、功能和提供的服务 （2）操作系统的发展与分类 （3）操作系统的运行环境 1）内核态与用户态 2）中断、异常 3）系统调用 （4）操作系统体系结构 操作系统概念 在信息化时代，软件被称为计算机系统的灵魂。而作为软件核心的操作系统，已经与现代计算机系统密不可分、融为一体。计算机系统自下而上可粗分为四个部分：硬件、操作系 统、应用程序和用户（这里的划分与计算机组成原理的分层不同）。操作系统管理各种计算机硬件，为应用程序提供基础，并充当计算机硬件与用户之间的中介。
操作系统是一种系统软件
硬件，如中央处理器、内存、输入/输出设备等，提供了基本的计算资源。应用程序， 如字处理程序、电子制表软件、编译器、网络浏览器等，规定了按何种方式使用这些资源来解决用户的计算问题。操作系统控制和协调各用户的应用程序对硬件的分配与使用。
在计算机系统的运行过程中，操作系统提供了正确使用这些资源的方法。
综上所述，操作系统(Operating System, OS)是指控制和管理整个计算机系统的硬件和软件资源，并合理地组织调度计算机的工作和资源的分配，以提供给用户和其他软件方便的接口和环境的程序集合。计算机操作系统是随着计算机研究和应用的发展逐步形成并发展起来的，它是计算机系统中最基本的系统软件。
OS 的特征 操作系统是一种系统软件，但与其他的系统软件和应用软件有很大的不同，它有自己的特殊性即基本特征。
操作系统的基本特征包括并发、共享、虚拟和异步。这些概念对理解和掌握操作系统的核心至关重要，将一直贯穿于各个章节中。
并发 Concurrence 并发是指两个或多个事件在同一时间间隔内发生。操作系统的并发性是指计算机系统中同时存在多个运行着的程序，因此它具有处理和调度多个程序同时执行的能力。
在操作系统 中，引入进程的目的是使程序能并发执行。[[3 内存管理]]
注意同一时间间隔（并发）和同一时刻（并行）的区别。 在多道程序环境下，一段时间内，宏观上有多道程序在同时执行，而在每一时刻，单处理机环境下实际仅能有一道程序执行，故微观上这些程序还是在分时地交替执行。橾作系统的并发性是通过分时得以实现的。 注意，并行性是指系统具有可以同时进行运算或操作的特性，在同一时刻完成两种或两种以上的工作。并行性需要有相关硬件的支持，如多流水线或多处理机硬件环境。 共享 Sharing 资源共享即共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。
共享可分为以下两种资源共享方式：
互斥共享方式
系统中的某些资源，如打印机、磁带机，虽然它们可以提供给多个进程使用，但为使所打印或记录的结果不致造成混淆，应规定在一段时间内只允许一个进程访问该资源。 为此，当进程 A 访问某资源时，必须先提出请求，如果此时该资源空闲，系统便可将之分配给进程 A 使用，此后若再有其他进程也要访问该资源时（只要 A 未用完）则必须等待。仅当进程 A 访问完并释放该资源后，才允许另一进程对该资源进行访问。 我们把这种资源共享方式称为互斥式共享，而把在一段时间内只允许一个进程访问的资源称为临界资源或独占资源。计算机系统中的大多数物理设备，以及某些软件中所用的栈、变量和表格，都属于临界资源，它们都要求被互斥地共享。 同时共享方式
系统中还有另一类资源，允许在一段时间内由多个进程“同时”对它们进行访问。这里所谓的“同时”往往是宏观上的，而在微观上，这些进程可能是交替地对该资源进行访问即 “分时共享”。 典型的可供多个进程“同时”访问的资源是磁盘设备，一些用重入码编写的文件也可以被“同时”共享，即若干个用户同时访问该文件。 并发和共享是操作系统两个最基本的特征，这两者之间又是互为存在条件的：
资源共享是以程序的并发为条件的，若系统不允许程序并发执行，则自然不存在资源共享问题； 若系统不能对资源共享实施有效的管理，也必将影响到程序的并发执行，甚至根本无法并发执行。 虚拟 Virtual 虚拟是指把一个物理上的实体变为若干个逻辑上的对应物。物理实体（前者）是实的，即实际存在的；而后者是虚的，是用户感觉上的事物。
用于实现虚拟的技术，称为虚拟技术。
在操作系统中利用了多种虚拟技术，分别用来实现虚拟处理器、虚拟内存和虚拟外部设备等。 CPU 虚拟
在虚拟处理器技术中，是通过多道程序设计技术，让多道程序并发执行的方法，来分时使用一个处理器的。此时，虽然只有一个处理器，但它能同时为多个用户服务，使每个终端用户都感觉有一个中央处理器（CPU)在专门为它服务。利用[[#多道批处理系统|多道程序设计技术]]，把一个物理上的 CPU 虚拟为多个逻辑上的 CPU,称为虚拟处理器。[[2 进程管理#处理机调度|处理机调度]] 存储器（内存）虚拟
类似地，可以通过虚拟存储器技术，将一台机器的物理存储器变为虚拟存储器，以便从逻辑上来扩充存储器的容量。当然,这时用户所感觉到的内存容量是虚的。我们把用户所感觉到的存储器（实际是不存在的）称为[[3 内存管理#虚存的定义和特征|虚拟存储器]]。 IO 设备虚拟</description>
    </item>
    
  </channel>
</rss>
